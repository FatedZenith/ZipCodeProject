Course: CSCI 331
Project: Zip Code Record Processor
Date: 9/17/25
Team 5

----------------------------------------------------
1. Project Overview
----------------------------------------------------

The purpose of this project is to read and process a CSV file
containing U.S. zip code records using a buffer class. The program will:

1. Read the CSV file line by line using a Fixed length text buffer.
2. Store each record in a ZipCodeRecord object.
3. Group the records by state.
4. Determine the geographic extremes for each state.
5. Output a formatted table to standard output, preceded by a header row.

We will also need to generate a doxygen file including all classes.

----------------------------------------------------
2. Data Description
----------------------------------------------------

Input CSV Fields:

Field       | Description                     | Example
------------|---------------------------------|----------------
ZipCode     | 5-digit zip code                | 90210
City        | City name                       | Beverly Hills
State       | 2-character state abbreviation  | CA
Latitude    | Decimal latitude                | 34.0901
Longitude   | Decimal longitude               | -118.4065

All fields will be stored as character arrays to 
match the textbook style. Latitude and longitude may
be stored as strings for buffer packing/unpacking, 
we can than convert into doubles to compare.

----------------------------------------------------
3. Classes and Data Structures
----------------------------------------------------

3.1 ZipCode
- Fields:
    - char ZipCode[10]
    - char City[21]
    - char State[3]
    - char Latitude[11]
    - char Longitude[11]
- Methods:
    - Clear() – reset all fields
    - Pack(FixedTextBuffer &) / Unpack(FixedTextBuffer &)
    - InitBuffer(FixedTextBuffer &)
    - Print(ostream &)

3.2 Buffer Classes
- FixedTextBuffer – holds fixed-length fields (from textbook)

3.3 Containers
-We will use an array of structs to contain the data.

----------------------------------------------------
4. Program Flow / Pseudocode
----------------------------------------------------

1. Initialize Buffer class for reading CSV
2. Open CSV file
3. Read the header row
4. While not end of file:
       a. Read line into buffer
       b. Unpack line into ZipCodeRecord
       c. Add record to container grouped by state
       d. Update east/west/north/south extremes for that state
5. Close CSV file
6. Print table header
7. For each state:
       a. Print state ID and extremes

----------------------------------------------------
5. Testing Plan
----------------------------------------------------

- We will use the given CSV with a few known zip codes to verify
- Check that printed table matches expected results.

----------------------------------------------------
6. Tools and Environment
----------------------------------------------------

- Buffer Utilities: fixtext.h/cpp
- Documentation: Doxygen, prelim.txt

----------------------------------------------------
7. Notes for Future Updates
----------------------------------------------------

- Include main.cpp design
- Decide on container type for state extremes
- Add error handling 
- Include Doxygen comments in all methods
- Test with large datasets





